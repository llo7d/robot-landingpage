/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';

export function Robot(props) {
  const { nodes, materials } = useGLTF('/robot.glb');
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Computer_Head.geometry}
        material={materials.Computer}
      >
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Angry.geometry}
          material={materials.Expression}
        /> */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cry.geometry}
          material={materials.Expression}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials.Parts}
          position={[1.995, 0.04, 0.378]}
          rotation={[-0.41, 0, 0.438]}
          scale={0.974}
        />
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001.geometry}
          material={materials.Parts}
          position={[1.874, 0.917, 0.335]}
          scale={0.935}
        /> */}
        {/* <mesh
          name="Neutral"
          castShadow
          receiveShadow
          geometry={nodes.Neutral.geometry}
          material={materials.Expression}
          morphTargetDictionary={nodes.Neutral.morphTargetDictionary}
          morphTargetInfluences={nodes.Neutral.morphTargetInfluences}
        /> */}
        {/* <mesh
          name="Smile"
          castShadow
          receiveShadow
          geometry={nodes.Smile.geometry}
          material={materials.Expression}
          morphTargetDictionary={nodes.Smile.morphTargetDictionary}
          morphTargetInfluences={nodes.Smile.morphTargetInfluences}
        /> */}
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere.geometry}
          material={materials.Parts}
          position={[1.757, 2.68, 0.335]}
          rotation={[0, 0, 0.151]}
          scale={0.935}
        /> */}
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Starry.geometry}
          material={materials.Expression}
        /> */}
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Vert.geometry}
          material={materials.Parts}
          position={[1.874, 0.917, 0.335]}
          scale={0.935}
        /> */}
      </mesh>
    </group>
  );
}

useGLTF.preload('/robot.glb');
